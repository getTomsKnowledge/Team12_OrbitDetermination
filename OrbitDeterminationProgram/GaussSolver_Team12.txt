function [R1, R2, R3] = gauss_solver(...
    los1, los2, los3,...
    site1, site2, site3,...
    t1, t2, t3)
    const = OrbitConstants();
    % Check input:
    if (isrow(los1))
        los1 = los1';
    end
    if (isrow(los2))
        los2 = los2';
    end
    if (isrow(los3))
        los3 = los3';
    end
    if (isrow(site1))
        site1 = site1';
    end
    if (isrow(site2))
        site2 = site2';
    end
    if (isrow(site3))
        site3 = site3';
    end

    % Get M matrix:
    L = [los1,los2,los3];
    L
    R = [site1,site2,site3];
    R

    M = inv(L)*R;


    % Eqns. 7.83 a,b:
    tau = zeros(1,3);
    tau(1) = t1 - t2;
    tau(2) = 0;
    tau(3) = t3 - t2;

    a1 = tau(3)/(tau(3) - tau(1));
    a3 = -tau(1)/(tau(3) - tau(1));
    a1u = (tau(3)*((tau(3) - tau(1))^2 - tau(3)^2)) ...
        / (6*(tau(3) - tau(1)));
    a3u = -(tau(1)*((tau(3) - tau(1))^2 - tau(1)^2) ...
        /(6*(tau(3) - tau(1))));

    % Eqns. 7.88/7.89:
    A = M(2,1)*a1 - M(2,2) + M(2,3)*a3;
    A
    B = M(2,1)*a1u + M(2,3)*a3u;
    B

    % Compute eighth-order polynomial coefficients:
    E = dot(los2, site2);
    R2sqrd = norm(site2)^2;
    mu = const.mu_earth_km*1e9;
    alpha0 = -(mu^2)*(B^2);
    alpha3 = -2*mu*B*(A + E);
    alpha6 = -(A^2 + 2*A*E + R2sqrd);

    % Solve eqn. 7.90 for roots:
    octicCoeffs = [1 0 alpha6 0 0 alpha3 0 0 alpha0];
    r2Roots = roots(octicCoeffs);
    
    % Check for roots less than Earth radius:
    r2 = [0 0 0];
    for n = 1:3
        if (isreal(r2Roots(n))...
                && (r2Roots(n) > const.R_earth_km*1e3))
            r2 = r2Roots(n);
        end
    end

    % Assign u:
    u = 0;
    if (r2 ~= 0 )
        u = mu / (r2^3);
    end

    % Compute c_i:
    c1 = a1 + a1u*u;
    c2 = -1;
    c3 = a3 + a3u*u;

    % Obtain c_i*rho_i:
    coeffVec = [c1, c2, c3]';
    products = -M*coeffVec;
    rhoVec = [products(1)/c1;
              products(2)/c2;
              products(3)/c3];

    % Apply vector addition to get r:
    R1 = site1 + rhoVec(1)*los1;
    R2 = site2 + rhoVec(2)*los2;
    R3 = site3 + rhoVec(3)*los3;

end